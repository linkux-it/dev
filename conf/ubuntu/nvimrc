"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer:
"     Luis Carlos Cruz Carballo
"     http://www.linkux-it.com - lcruzc@linkux-it.com
"
" Sections:
"   -> General
"   -> NeoVim
"   -> Base Plugins
"   -> Ruby
"   -> Python
"   -> Node, Javascript and Typescript
"   -> GraphQL
"   -> FrontEnd
"   -> TMUX Integration
"   -> Folding and Theme
"
" Description:
"   This script is used inside Linkux IT for using vim or neovim as
"   main text editor for coding software.
"
"   All key mappings should be set to a namespace under the keyleader
"   for exampke:
"
"       * Bufers will be under <leader> b
"       * Tabs will be under <leader> t
"       * Denite will be under <leader> u
"       * Dein will be under <leader> d
"       * Search will be under <leader> s
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" The encoding displayed in terminal/gui
set encoding=utf-8

" The encoding written to file.
set fileencoding=utf-8

" enable syntax highlighting
syntax enable

" show line numbers
set number

" show partial command
set showcmd

" indent when moving to the next line while writing code
set autoindent

" show a visual line under the cursor's current line
set cursorline
set cursorcolumn
set colorcolumn=80

" show the matching part of the pair for [] {} and ()
set showmatch

" Set to auto read when a file is changed from the outside
set autoread

set history=10000
set incsearch
set hlsearch
set smarttab
set undolevels=1000
set relativenumber
set list
set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
set t_Co=256
set background=dark
set lazyredraw
set hidden
" faster redrawing
set ttyfast
set magic " Set magic on, for regex

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500

" enable true colors
set termguicolors
let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

set inccommand=split

" enable all Python syntax highlighting features
let python_highlight_all = 1

let base16colorspace=256

" With a map leader it's possible to do extra key combinations
let mapleader = " "
let g:mapleader = " "

" tab navigation
nnoremap <leader>th  :tabfirst<CR>
nnoremap <leader>tj  :tabnext<CR>
nnoremap <leader>tk  :tabprev<CR>
nnoremap <leader>tl  :tablast<CR>
nnoremap <leader>tn  :tabnew<CR>
nnoremap <leader>tt  :tabedit<Space>
nnoremap <leader>tm  :tabm<Space>
nnoremap <leader>td  :tabclose<CR>

" buffer navigation
nnoremap <leader>bh  :bfirst<CR>
nnoremap <leader>bk  :bnext<CR>
nnoremap <leader>bj  :bprev<CR>
nnoremap <leader>bl  :blast<CR>
nnoremap <leader>bn  :enew<CR>
nnoremap <leader>bm  :bm<Space>
nnoremap <leader>bd  :BD<CR>
nnoremap <leader>bun :BUN<CR>
nnoremap <leader>bw  :BW<CR>
nnoremap <leader>ba  :BA<CR>

" Search maps
nnoremap <leader>s /
nnoremap <leader>sa :Ack --
nnoremap <leader>svg :vimgrep 
nnoremap <leader>sg :grep 

" File maps
nnoremap <leader>fs :w<CR>
nnoremap <leader>fsa :wa<CR>
nnoremap <leader>fo :e

" This expands current directory related with active buffer
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Remember last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NeoVim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Note: Skip initialization for vim-tiny or vim-small.
let g:make = 'gmake'
if system('uname -o') =~ '^GNU/'
  let g:make = 'make'
endif

if !1 | finish | endif

if has('vim_starting')
  " Be iMproved
  if &compatible
    set nocompatible
  endif

  " Required:
  set runtimepath+=~/.config/nvim/bundle/dein.vim/
endif

" Required:
call dein#begin(expand('~/.cache/dein'))
call dein#add(expand('~/.config/nvim/bundle/dein.vim'))


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Base Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call dein#add('Shougo/vimproc.vim', {'build': 'make -f make_mac.mak' })
call dein#add('Shougo/neomru.vim')
call dein#add('chriskempson/base16-vim')
call dein#add('tpope/vim-surround')
call dein#add('tpope/vim-endwise')
call dein#add('tpope/vim-speeddating')
call dein#add('tomtom/tcomment_vim')
call dein#add('terryma/vim-expand-region')
call dein#add('terryma/vim-multiple-cursors')
call dein#add('chrisbra/NrrwRgn')
call dein#add('airblade/vim-gitgutter')
call dein#add('christoomey/vim-tmux-navigator')
call dein#add('jiangmiao/auto-pairs')
call dein#add('severin-lemaignan/vim-minimap')
call dein#add('vim-scripts/PreserveNoEOL')
call dein#add('mileszs/ack.vim')
call dein#add('tpope/vim-repeat')
call dein#add('tpope/vim-obsession')
call dein#add('simnalamburt/vim-mundo')
call dein#add('tpope/vim-abolish')
call dein#add('qpkorr/vim-bufkill')
call dein#add('xolox/vim-misc')
call dein#add('vim-scripts/ZoomWin')
call dein#add('kopischke/vim-fetch')
call dein#add('nhooyr/neoman.vim')
call dein#add('Konfekt/FastFold')
call dein#add('tpope/vim-scriptease', {'on_ft': ['vim']})
call dein#add('junegunn/limelight.vim')
call dein#add('mhartington/oceanic-next')
call dein#add('kamwitsta/nordisk')
call dein#add('sickill/vim-monokai')
call dein#add('milkypostman/vim-togglelist') "{{{
  let g:toggle_list_no_mappings = 1
  nmap <script> <silent> <leader>wl :call ToggleLocationList()<CR>
  nmap <script> <silent> <leader>wq :call ToggleQuickfixList()<CR>
"}}}
call dein#add('ajh17/Spacegray.vim') "{{{
  let g:spacegray_underline_search = 1
  let g:spacegray_italicize_comments = 1
"}}}
call dein#add('Yggdroot/indentLine') "{{{ 
  " let g:indentLine_char='┆'
"}}}

call dein#add('craigemery/vim-autotag') "{{{
  " set cpoptions+=d  " i had to add this, it wasn't on until now.
  set tags=./.git/tags
  let g:autotagTagsFile=".git/tags"
"}}}

call dein#add('majutsushi/tagbar') "{{{
  noremap <leader>ct :TagbarToggle<CR>
"}}}

call dein#add('embear/vim-localvimrc') "{{{
  let g:localvimrc_sandbox = 0
  let g:localvimrc_persistent = 2
"}}}

call dein#add('haya14busa/incsearch.vim') "{{{
  let g:incsearch#magic = '\v' " very magic
  let g:incsearch#magic = '\V' " very nomagic
  let g:incsearch#magic = '\m' " magic
  let g:incsearch#magic = '\M' " nomagic
"}}}

call dein#add('haya14busa/incsearch-fuzzy.vim') "{{{
"}}} 

call dein#add('easymotion/vim-easymotion') "{{{
  " map f <Plug>(easymotion-f)
  " map F <Plug>(easymotion-F)
  " map t <Plug>(easymotion-t)
  " map T <Plug>(easymotion-T)
  " map w <Plug>(easymotion-w)
  " map W <Plug>(easymotion-W)
  " map b <Plug>(easymotion-b)
  " map B <Plug>(easymotion-B)
  " map e <Plug>(easymotion-e)
  " map E <Plug>(easymotion-E)
  " map e <Plug>(easymotion-e)
  " map E <Plug>(easymotion-E)
  " map ge <Plug>(easymotion-ge)
  " map gE <Plug>(easymotion-gE)

  " Line motion
  map <leader>l <Plug>(easymotion-lineforward)
  map <leader>j <Plug>(easymotion-j)
  map <leader>k <Plug>(easymotion-k)
  map <leader>h <Plug>(easymotion-linebackward)

  " Search Motions!
  " map  / <Plug>(easymotion-sn)
  " omap / <Plug>(easymotion-tn)
  
  " These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
  " Without these mappings, `n` & `N` works fine. (These mappings just provide
  " different highlight method and have some other features )
  " map  n <Plug>(easymotion-next)
  " map  N <Plug>(easymotion-prev)

  let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_use_smartsign_us = 1 " US layout
"}}}

call dein#add('haya14busa/incsearch-easymotion.vim') "{{{
  map / <Plug>(incsearch-easymotion-/)
  map ? <Plug>(incsearch-easymotion-?)
  map g/ <Plug>(incsearch-easymotion-stay)

  " incsearch.vim x fuzzy x vim-easymotion
  function! s:config_easyfuzzymotion(...) abort
    return extend(copy({
    \   'converters': [incsearch#config#fuzzy#converter()],
    \   'modules': [incsearch#config#easymotion#module()],
    \   'keymap': {"\<CR>": '<Over>(easymotion)'},
    \   'is_expr': 0,
    \   'is_stay': 1
    \ }), get(a:, 1, {}))
  endfunction
  
  noremap <silent><expr> <leader>/ incsearch#go(<SID>config_easyfuzzymotion())
"}}}

call dein#add('haya14busa/vim-asterisk') "{{{
  map *   <Plug>(incsearch-nohl)<Plug>(asterisk-*)
  map g*  <Plug>(incsearch-nohl)<Plug>(asterisk-g*)
  map #   <Plug>(incsearch-nohl)<Plug>(asterisk-#)
  map g#  <Plug>(incsearch-nohl)<Plug>(asterisk-g#)
  
  map z*  <Plug>(incsearch-nohl0)<Plug>(asterisk-z*)
  map gz* <Plug>(incsearch-nohl0)<Plug>(asterisk-gz*)
  map z#  <Plug>(incsearch-nohl0)<Plug>(asterisk-z#)
  map gz# <Plug>(incsearch-nohl0)<Plug>(asterisk-gz#)
  let g:asterisk#keeppos = 1
"}}}

call dein#add('mhinz/vim-startify') "{{{
  let g:startify_list_order = [
      \ ['   MRU '],       'files' ,
      \ ['   MRU DIR '],   'dir',
      \ ['   Sessions '],  'sessions',
      \ ['   Bookmarks '], 'bookmarks',
      \ ]

  let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ 'bundle/.*/doc',
      \ ]

  let g:startify_bookmarks              = [ {'c': '~/.config/nvim/init.vim'} ]
  let g:startify_change_to_dir          = 0
  let g:startify_enable_special         = 0
  let g:startify_files_number           = 8
  "let g:startify_session_autoload       = 1
  "let g:startify_session_delete_buffers = 1
  "let g:startify_session_persistence    = 1

  function! s:center_header(lines) abort
    let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
    let centered_lines = map(copy(a:lines), 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
    return centered_lines
  endfunction

  let g:startify_custom_header = s:center_header(split(system('fortune | cowsay -f `ls /usr/local/share/cows | gshuf -n 1`'), '\n'))
"}}}

call dein#add('honza/vim-snippets')
call dein#add('SirVer/ultisnips') "{{{
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" }}}

call dein#add('neomake/neomake') "{{{
  autocmd! BufWritePost,BufEnter * Neomake
"}}}

call dein#add('tpope/vim-fugitive') " {{{
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gdiff<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
  nnoremap <silent> <leader>gw :Gwrite<CR>
  nnoremap <silent> <leader>gr :Gremove<CR>
  autocmd BufReadPost fugitive://* set bufhidden=delete
" }}}

call dein#add('vim-airline/vim-airline') " {{{
  set laststatus=2  "Force appear the status line "
  let g:airline#extensions#tabline#enabled = 1
  " let g:airline#extensions#tabline#left_sep = ' '
  " let g:airline#extensions#tabline#left_alt_sep = '¦'
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#tabline#fnamemod = ':t'
  let g:airline_powerline_fonts = 1
  let g:airline_theme = 'oceanicnext'
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9
" }}}

call dein#add('vim-airline/vim-airline-themes')
call dein#add('kennykaye/vim-relativity')

call dein#add('Shougo/deoplete.nvim', {'on_i': 1}) "{{{
  let g:deoplete#enable_at_startup = 1
" }}}

call dein#add('zchee/deoplete-jedi', )
call dein#add('carlitux/deoplete-ternjs')
call dein#add('Shougo/neoinclude.vim')
call dein#add('Shougo/neco-syntax')

call dein#add('gilsondev/searchtasks.vim') " {{{
  let g:searchtasks_list=["TODO", "FIXME", "NOTE", "CHANGED", "TEST"]
" }}}

call dein#add('Shougo/denite.nvim') "{{{
  nmap <leader>u [denite]
  nnoremap [denite] <nop>
  nnoremap <silent> [denite]fr :Denite file_rec<cr>
  nnoremap <silent> [denite]fp :Denite file_filepoint<cr>
  nnoremap <silent> [denite]b :Denite buffer<cr>
  nnoremap <silent> [denite]h :Denite help<cr>
  nnoremap <silent> [denite]dr :Denite directory_rec<cr>
  nnoremap <silent> [denite]r :Denite file_mru<cr>
  nnoremap <silent> [denite]t :Denite filetype<cr>
  nnoremap <silent> [denite]g :Denite grep<cr>
  nnoremap <silent> [denite]l :Denite line<cr>
  nnoremap <silent> [denite]m :Denite menu<cr>
  nnoremap <silent> [denite]j :Denite jump_point<cr>
  nnoremap <silent> [denite]c :Denite command<cr>
  nnoremap <silent> [denite]cs :Denite colorscheme<cr>

  call denite#custom#var('grep', 'command', ['ack'])
  call denite#custom#var('grep', 'recursive_opts', [])
  call denite#custom#var('grep', 'final_opts', [])
  call denite#custom#var('grep', 'separator', [])
  call denite#custom#var('grep', 'default_opts',
       \ ['--ackrc', $HOME.'/.ackrc', '-H',
       \ '--nopager', '--nocolor', '--nogroup', '--column'])

  call denite#custom#source('file_rec', 'sorters', ['sorter_sublime'])
  call denite#custom#source('file_mru', 'sorters', ['sorter_sublime'])
  call denite#custom#source('directory_rec', 'sorters', ['sorter_sublime'])
  call denite#custom#source('buffer', 'sorters', ['sorter_sublime'])
  call denite#custom#source('help', 'sorters', ['sorter_sublime'])
  call denite#custom#source('line', 'sorters', ['sorter_sublime'])
  call denite#custom#source('grep', 'sorters', ['sorter_sublime'])
  call denite#custom#source('command', 'sorters', ['sorter_sublime'])
  call denite#custom#source('colorscheme', 'sorters', ['sorter_sublime'])
" }}}

call dein#add('Shougo/unite.vim') "{{{
" }}}

call dein#add('gregsexton/gitv', {'depends': ['tpope/vim-fugitive']}) "{{{
  nnoremap <silent> <leader>gv :Gitv<CR>
  nnoremap <silent> <leader>gV :Gitv!<CR>
" }}}

call dein#add('godlygeek/tabular', {'on_cmd': 'Tabularize'}) "{{{
  nmap <Leader>a& :Tabularize /&<CR>
  vmap <Leader>a& :Tabularize /&<CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:<CR>
  vmap <Leader>a: :Tabularize /:<CR>
  nmap <Leader>a:: :Tabularize /:\zs<CR>
  vmap <Leader>a:: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
" }}}

call dein#add('editorconfig/editorconfig-vim', {'on_i': 1}) " {{{
  let g:EditorConfig_exclude_patterns = ['fugitive://.*']
  let g:EditorConfig_exclude_patterns = ['scp://.*']
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" }}}

call dein#add('Shougo/vimfiler.vim', {'on_cmd' : 'VimFiler'}) " {{{
  let g:vimfiler_as_default_explorer = 1
  let g:vimfiler_safe_mode_by_default = 0
  let g:vimfiler_tree_leaf_icon = "⋮"
  let g:vimfiler_tree_opened_icon = '▾'
  let g:vimfiler_tree_closed_icon = '▸'
  let g:vimfiler_readonly_file_icon = '\uE0A2'
  let g:vimfiler_enable_auto_cd = 1
  let g:vimfiler_ignore_pattern = '^\%(\.git\|\.hg\|\.swp\|\.sass-cache\|\.DS_Store\|.*\.pyc\|\.vagrant\)$'

  nmap <silent><leader>nt :VimFilerExplorer -winwidth=32<CR>
  nmap <silent><leader>ntf :VimFilerExplorer -find<CR>

  autocmd BufEnter * if (winnr('$') == 1 && &filetype ==# 'vimfiler') | q | endif
  autocmd FileType vimfiler nnoremap <silent><buffer><expr> S vimfiler#do_switch_action('vsplit')
  autocmd FileType vimfiler nnoremap <silent><buffer><expr> s vimfiler#do_switch_action('split')
"}}}


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ruby
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call dein#add('tpope/vim-rails', {'on_ft': 'ruby'})
call dein#add('tpope/vim-bundler', {'on_ft': 'ruby'})

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Python
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call dein#add('jmcantrell/vim-virtualenv', {'on_ft': ['python']})

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Node, Javascript and Typescript
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call dein#add('moll/vim-node', {'on_ft': ['javascript']})
call dein#add('pangloss/vim-javascript', {'on_ft': ['javascript']})
call dein#add('leafgarland/typescript-vim', {'on_ft': ['typescript']})
call dein#add('leshill/vim-json', {'on_ft': ['javascript','json']})
call dein#add('maksimr/vim-jsbeautify', {'on_ft': ['javascript']}) " {{{
  nnoremap <leader>jsb :call JsBeautify()<cr>
" }}}

call dein#add('kchmck/vim-coffee-script', {'on_ft': ['coffee']}) " {{{
  let coffee_indent_keep_current = 1
" }}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => GraphQL
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call dein#add('jparise/vim-graphql')

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FrontEnd
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call dein#add('mxw/vim-jsx', {'on_ft': ['jsx', 'javascript.jsx']}) "{{{
  let g:jsx_ext_required = 1 " Allow JSX in normal JS files"
"}}}
call dein#add('avelino/flux.vim', {'on_ft': ['jsx', 'javascript.jsx']})
call dein#add('groenewege/vim-less', {'on_ft': ['less']})
call dein#add('cakebaker/scss-syntax.vim', {'on_ft': ['scss','sass']})
call dein#add('hail2u/vim-css3-syntax', {'on_ft': ['css','scss','sass']})
call dein#add('ap/vim-css-color', {'on_ft': ['css','scss','sass','less','styl']})
call dein#add('othree/html5.vim', {'on_ft': ['html']})
call dein#add('wavded/vim-stylus', {'on_ft': ['styl']})
call dein#add('digitaltoad/vim-jade', {'on_ft': ['jade']})
call dein#add('gregsexton/MatchTag', {'on_ft': ['html','xml']})
call dein#add('othree/javascript-libraries-syntax.vim', {'on_ft': ['javascript','coffee','ls','typescript']})
call dein#add('tpope/vim-markdown', {'on_ft':['markdown']})

call dein#add('mustache/vim-mustache-handlebars', {'on_ft': ['mustache','handlebars','hbs']}) " {{{
  let g:mustache_abbreviations = 1
" }}}

call dein#add('mattn/emmet-vim', {'on_ft': ['htmldjango','jsx','swig','html','xml','xsl','xslt','xsd','css','sass','scss','less','mustache','handlebars','hbs']}) " {{{
  let g:user_emmet_settings = {'html':{'quote_char': "'",},}
" }}}

call dein#add('jvirtanen/vim-octave')

call dein#end()

" Required:
" Enable filetype plugins
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => TMUX Integration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if exists('$TMUX')
  " Easy navigation same as tmux, enjoy it!
  let g:tmux_navigator_no_mappings = 1

  nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
  nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
  nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
  nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
  nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

  let g:tmux_navigator_save_on_switch = 1
else
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
endif

tnoremap <Esc> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>

tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

nnoremap <leader>du :call dein#update()<cr>
nnoremap <leader>dc :call dein#check_update()<cr>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Folding and Theme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"foldmethod ident for some type of files
set foldlevel=99
set nofoldenable

" This the default one
set foldmethod=syntax nofoldenable
autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
autocmd BufNewFile,BufReadPost *.py setl foldmethod=indent nofoldenable

" This to close preview when insert mode leaves
autocmd InsertLeave * if pumvisible() == 0|pclose|endif

" Color schema working at this point?
colorscheme nordisk

" Next three lines are to enable C-Space to autocomplete, omnicomplete
inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <c-x><c-o>
