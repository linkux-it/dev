"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Maintainer:
"     Luis Carlos Cruz Carballo
"     http://www.linkux-it.com - lcruzc@linkux-it.com
"
" Sections:
"   -> General
"   -> NeoVim
"   -> Base Plugins
"   -> Ruby
"   -> Python
"   -> Node, Javascript and Typescript
"   -> FrontEnd
"   -> TMUX Integration
"   -> Folding and Theme
"
" Description:
"   This script is used inside Linkux IT for using vim or neovim as
"   main text editor for coding software.
"
"   All key mappings should be set to a namespace under the keyleader
"   for exampke:
"
"   	* Bufers will be under <leader> b 
"   	* Tabs will be under <leader> t 
"
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" The encoding displayed in terminal/gui
set encoding=utf-8

" The encoding written to file.
set fileencoding=utf-8

" enable syntax highlighting
syntax enable

" show line numbers
set number

" indent when moving to the next line while writing code
set autoindent

" show a visual line under the cursor's current line
set cursorline
set cursorcolumn
set colorcolumn=80

" show the matching part of the pair for [] {} and ()
set showmatch

" Set to auto read when a file is changed from the outside
set autoread

set history=10000
set incsearch
set hlsearch
set smarttab
set undolevels=1000
set relativenumber
set list
set listchars=tab:│\ ,trail:•,extends:❯,precedes:❮
set t_Co=256
set background=dark
set lazyredraw
set hidden
" faster redrawing
set ttyfast
set magic " Set magic on, for regex

" error bells
set noerrorbells
set visualbell
set t_vb=
set tm=500

" enable all Python syntax highlighting features
let python_highlight_all = 1

let base16colorspace=256

" With a map leader it's possible to do extra key combinations
let mapleader = " "
let g:mapleader = " "

" tab navigation
nnoremap <leader>th  :tabfirst<CR>
nnoremap <leader>tj  :tabnext<CR>
nnoremap <leader>tk  :tabprev<CR>
nnoremap <leader>tl  :tablast<CR>
nnoremap <leader>tn  :tabnew<CR>
nnoremap <leader>tt  :tabedit<Space>
nnoremap <leader>tm  :tabm<Space>
nnoremap <leader>td  :tabclose<CR>

" buffer navigation
nnoremap <leader>bh  :bfirst<CR>
nnoremap <leader>bj  :bnext<CR>
nnoremap <leader>bk  :bprev<CR>
nnoremap <leader>bl  :blast<CR>
nnoremap <leader>bn  :enew<CR>
nnoremap <leader>bm  :bm<Space>
nnoremap <leader>bd  :BD<CR>
nnoremap <leader>bun :BUN<CR>
nnoremap <leader>bw  :BW<CR>
nnoremap <leader>ba  :BA<CR>

" Search maps
nnoremap <leader>s /
nnoremap <leader>sa :Ack --
nnoremap <leader>svg :vimgrep 
nnoremap <leader>sg :grep 

" File maps
nnoremap <leader>fs :w<CR>
nnoremap <leader>fsa :wa<CR>
nnoremap <leader>fo :e

" This expands current directory related with active buffer
cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" Remember last position
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => NeoVim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Note: Skip initialization for vim-tiny or vim-small.
let g:make = 'gmake'
if system('uname -o') =~ '^GNU/'
  let g:make = 'make'
endif

if !1 | finish | endif

if has('vim_starting')
  " Be iMproved
  if &compatible
    set nocompatible
  endif

  " Required:
  set runtimepath+=~/.config/nvim/bundle/neobundle.vim/
endif

" Required:
call neobundle#begin(expand('~/.config/nvim/bundle/'))

" Let NeoBundle manage NeoBundle
" Required:
NeoBundleFetch 'Shougo/neobundle.vim'

" My Bundles here:
" Refer to |:NeoBundle-examples|.
" Note: You don't set neobundle setting in .gvimrc!

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Base Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
NeoBundle 'Shougo/vimproc.vim', {'build': {'unix': g:make}}
NeoBundle 'Shougo/neomru.vim'
NeoBundle 'chriskempson/base16-vim'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tpope/vim-endwise'
NeoBundle 'tpope/vim-speeddating'
NeoBundle 'tomtom/tcomment_vim'
NeoBundle 'terryma/vim-expand-region'
NeoBundle 'terryma/vim-multiple-cursors'
NeoBundle 'chrisbra/NrrwRgn'
NeoBundle 'airblade/vim-gitgutter'
NeoBundle 'christoomey/vim-tmux-navigator'
NeoBundle 'jiangmiao/auto-pairs'
NeoBundle 'severin-lemaignan/vim-minimap'
NeoBundle 'vim-scripts/PreserveNoEOL'
NeoBundle 'mileszs/ack.vim'
NeoBundle 'tpope/vim-repeat'
NeoBundle 'tpope/vim-obsession'
NeoBundle 'simnalamburt/vim-mundo'
NeoBundle 'bronson/vim-visual-star-search'
NeoBundle 'tpope/vim-abolish'
NeoBundle 'qpkorr/vim-bufkill'
NeoBundle 'xolox/vim-misc'
NeoBundle 'rizzatti/dash.vim'
NeoBundle 'vim-scripts/ZoomWin'
NeoBundle 'kopischke/vim-fetch'
NeoBundle 'nhooyr/neoman.vim'
NeoBundle 'Konfekt/FastFold'
NeoBundleLazy 'tpope/vim-scriptease', {'autoload':{'filetypes':['vim']}}

NeoBundle 'xolox/vim-easytags' "{{{
  " set cpoptions+=d  " i had to add this, it wasn't on until now.
  " set tags=./tags
  let g:easytags_by_filetype = expand(".")
  let g:easytags_async=1
  let g:easytags_dynamic_files=1
  let g:easytags_include_members=1
  let g:easytags_languages = {
  \   'javascript': {
  \     'cmd': 'jsctags',
  \       'args': [],
  \       'fileoutput_opt': '-f',
  \       'stdout_opt': '-f-',
  \       'recurse_flag': '-R'
  \   }
  \}
"}}}

NeoBundle 'majutsushi/tagbar' "{{{
  noremap <leader>ct :TagbarToggle<CR>
"}}}

NeoBundle 'embear/vim-localvimrc' "{{{
  let g:localvimrc_sandbox = 0
  let g:localvimrc_persistent = 2
"}}}

NeoBundle 'Lokaltog/vim-easymotion' "{{{
  " Search Motions!
  map  <leader>/ <Plug>(easymotion-sn)
  omap <leader>/ <Plug>(easymotion-tn)
  map  <leader>se <Plug>(easymotion-sn)
  omap <leader>se <Plug>(easymotion-tn)
  
  " These `n` & `N` mappings are options. You do not have to map `n` & `N` to EasyMotion.
  " Without these mappings, `n` & `N` works fine. (These mappings just provide
  " different highlight method and have some other features )
  map  <leader>n <Plug>(easymotion-next)
  map  <leader>N <Plug>(easymotion-prev)

  " Line motion
  map <Leader>l <Plug>(easymotion-lineforward)
  map <Leader>j <Plug>(easymotion-j)
  map <Leader>k <Plug>(easymotion-k)
  map <Leader>h <Plug>(easymotion-linebackward)

  let g:EasyMotion_startofline = 0 " keep cursor column when JK motion
  let g:EasyMotion_smartcase = 1
  let g:EasyMotion_use_smartsign_us = 1 " US layout
"}}}

NeoBundle 'mhinz/vim-startify' "{{{
  let g:startify_list_order = [
      \ ['   MRU '],       'files' ,
      \ ['   MRU DIR '],   'dir',
      \ ['   Sessions '],  'sessions',
      \ ['   Bookmarks '], 'bookmarks',
      \ ]

  let g:startify_skiplist = [
      \ 'COMMIT_EDITMSG',
      \ 'bundle/.*/doc',
      \ ]

  let g:startify_bookmarks              = [ {'c': '~/.config/nvim/init.vim'} ]
  let g:startify_change_to_dir          = 0
  let g:startify_enable_special         = 0
  let g:startify_files_number           = 8
  "let g:startify_session_autoload       = 1
  "let g:startify_session_delete_buffers = 1
  "let g:startify_session_persistence    = 1

  function! s:center_header(lines) abort
    let longest_line   = max(map(copy(a:lines), 'len(v:val)'))
    let centered_lines = map(copy(a:lines), 'repeat(" ", (&columns / 2) - (longest_line / 2)) . v:val')
    return centered_lines
  endfunction

  let g:startify_custom_header = s:center_header(split(system('fortune | cowsay -f `ls /usr/local/share/cows | gshuf -n 1`'), '\n'))
"}}}


NeoBundle 'honza/vim-snippets'
NeoBundle 'SirVer/ultisnips' "{{{
  let g:UltiSnipsExpandTrigger="<tab>"
  let g:UltiSnipsJumpForwardTrigger="<c-j>"
  let g:UltiSnipsJumpBackwardTrigger="<c-k>"
" }}}

NeoBundle 'neomake/neomake'

NeoBundle 'tpope/vim-fugitive' " {{{
  nnoremap <silent> <leader>gs :Gstatus<CR>
  nnoremap <silent> <leader>gd :Gdiff<CR>
  nnoremap <silent> <leader>gc :Gcommit<CR>
  nnoremap <silent> <leader>gb :Gblame<CR>
  nnoremap <silent> <leader>gl :Glog<CR>
  nnoremap <silent> <leader>gp :Git push<CR>
  nnoremap <silent> <leader>gw :Gwrite<CR>
  nnoremap <silent> <leader>gr :Gremove<CR>
  autocmd BufReadPost fugitive://* set bufhidden=delete
" }}}


NeoBundle 'vim-airline/vim-airline' " {{{
  set laststatus=2  "Force appear the status line "
  let g:airline#extensions#tabline#enabled = 1
  " let g:airline#extensions#tabline#left_sep = ' '
  " let g:airline#extensions#tabline#left_alt_sep = '¦'
  let g:airline#extensions#tabline#buffer_idx_mode = 1
  let g:airline#extensions#tabline#fnamemod = ':t'
  let g:airline_powerline_fonts = 1
  let g:airline_theme = 'base16color'
  nmap <leader>1 <Plug>AirlineSelectTab1
  nmap <leader>2 <Plug>AirlineSelectTab2
  nmap <leader>3 <Plug>AirlineSelectTab3
  nmap <leader>4 <Plug>AirlineSelectTab4
  nmap <leader>5 <Plug>AirlineSelectTab5
  nmap <leader>6 <Plug>AirlineSelectTab6
  nmap <leader>7 <Plug>AirlineSelectTab7
  nmap <leader>8 <Plug>AirlineSelectTab8
  nmap <leader>9 <Plug>AirlineSelectTab9
" }}}


NeoBundle 'vim-airline/vim-airline-themes'
NeoBundle 'kennykaye/vim-relativity'

NeoBundle 'Shougo/deoplete.nvim' "{{{
  let g:deoplete#enable_at_startup = 1
" }}}
NeoBundle 'zchee/deoplete-jedi'
NeoBundle 'carlitux/deoplete-ternjs'
NeoBundle 'Shougo/neoinclude.vim'
NeoBundle 'Shougo/neco-syntax'


NeoBundle 'gilsondev/searchtasks.vim' " {{{
  let g:searchtasks_list=["TODO", "FIXME", "NOTE", "CHANGED", "TEST"]
" }}}


NeoBundle 'Shougo/unite.vim' "{{{
  let bundle = neobundle#get('unite.vim')
  function! bundle.hooks.on_source(bundle)
    call unite#filters#matcher_default#use(['matcher_fuzzy'])
    call unite#filters#sorter_default#use(['sorter_rank'])
    call unite#custom#profile('default', 'context', {
          \ 'start_insert': 1
          \ })
  endfunction

  " let g:unite_data_directory=s:get_cache_dir('unite')
  let g:unite_source_history_yank_enable=1
  let g:unite_source_rec_max_cache_files=5000

  " Ack should be already installed
  let g:unite_source_grep_command='ack'
  let g:unite_source_grep_default_opts='--no-heading --no-color -C4'
  let g:unite_source_grep_recursive_opt=''

  function! s:unite_settings()
    nmap <buffer> Q <plug>(unite_exit)
    nmap <buffer> <esc> <plug>(unite_exit)
    imap <buffer> <esc> <plug>(unite_exit)
  endfunction
  autocmd FileType unite call s:unite_settings()

  nmap <space>u [unite]
  nnoremap [unite] <nop>

  nnoremap <silent> [unite]<space> :<C-u>Unite -toggle -auto-resize -buffer-name=mixed file_rec/async:! buffer file_mru bookmark<cr><c-u>
  nnoremap <silent> [unite]f :<C-u>Unite -toggle -auto-resize -buffer-name=files file_rec/async:!<cr><c-u>
  nnoremap <silent> [unite]e :<C-u>Unite -buffer-name=recent file_mru<cr>
  nnoremap <silent> [unite]y :<C-u>Unite -buffer-name=yanks history/yank<cr>
  nnoremap <silent> [unite]l :<C-u>Unite -auto-resize -buffer-name=line line<cr>
  nnoremap <silent> [unite]b :<C-u>Unite -auto-resize -buffer-name=buffers buffer file_mru<cr>
  nnoremap <silent> [unite]/ :<C-u>Unite -no-quit -buffer-name=search grep:.<cr>
  nnoremap <silent> [unite]m :<C-u>Unite -auto-resize -buffer-name=mappings mapping<cr>
  nnoremap <silent> [unite]s :<C-u>Unite -quick-match buffer<cr>
" }}}

NeoBundleLazy 'tsukkee/unite-tag', {'depends':['Shougo/unite.vim']} " {{{
  nnoremap <silent> [unite]t :Unite tag<cr>
  nnoremap <silent> [unite]tf :Unite tag/file<cr>
  nnoremap <silent> [unite]ti :Unite tag/include<cr>
  nnoremap <silent> [unite]tb :Unite tag:%<cr>
  nnoremap [unite]tt :Unite tag:text
  nnoremap [unite]tp :Unite tag:/
" }}}

NeoBundleLazy 'gregsexton/gitv', {'depends':['tpope/vim-fugitive'], 'autoload':{'commands':'Gitv'}} " {{{
  nnoremap <silent> <leader>gv :Gitv<CR>
  nnoremap <silent> <leader>gV :Gitv!<CR>
" }}}


NeoBundleLazy 'godlygeek/tabular', {'autoload':{'commands':'Tabularize'}} " {{{
  nmap <Leader>a& :Tabularize /&<CR>
  vmap <Leader>a& :Tabularize /&<CR>
  nmap <Leader>a= :Tabularize /=<CR>
  vmap <Leader>a= :Tabularize /=<CR>
  nmap <Leader>a: :Tabularize /:<CR>
  vmap <Leader>a: :Tabularize /:<CR>
  nmap <Leader>a:: :Tabularize /:\zs<CR>
  vmap <Leader>a:: :Tabularize /:\zs<CR>
  nmap <Leader>a, :Tabularize /,<CR>
  vmap <Leader>a, :Tabularize /,<CR>
  nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
  vmap <Leader>a<Bar> :Tabularize /<Bar><CR>
" }}}


NeoBundleLazy 'editorconfig/editorconfig-vim', {'autoload':{'insert':1, 'filetypes': 'all'}} " {{{
  let g:EditorConfig_exclude_patterns = ['fugitive://.*']
  let g:EditorConfig_exclude_patterns = ['scp://.*']
  let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
" }}}


NeoBundleLazy 'scrooloose/nerdtree', {'autoload':{'commands':['NERDTreeToggle','NERDTreeFind']}} " {{{
  let NERDTreeShowHidden=1
  let NERDTreeQuitOnOpen=0
  let NERDTreeShowLineNumbers=1
  let NERDTreeChDirMode=0
  let NERDTreeShowBookmarks=1
  let NERDTreeIgnore=['\.git','\.hg','\.pyc$','\.DS_Store','\.swp','\.sass-cache']
  " let NERDTreeBookmarksFile=s:get_cache_dir('NERDTreeBookmarks')
  nmap <silent><leader>nt :NERDTreeToggle<CR>
  nmap <silent><leader>ntf :NERDTreeFind<CR>
  autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
" }}}


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Ruby
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

NeoBundleLazy 'tpope/vim-rails'
NeoBundleLazy 'tpope/vim-bundler'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Python
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

NeoBundleLazy 'jmcantrell/vim-virtualenv', {'autoload':{'filetypes':['python']}}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Node, Javascript and Typescript
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

NeoBundleLazy 'moll/vim-node', {'autoload': {'filetypes':['javascript']}}
NeoBundleLazy 'pangloss/vim-javascript', {'autoload':{'filetypes':['javascript']}}
NeoBundleLazy 'leafgarland/typescript-vim', {'autoload':{'filetypes':['typescript']}}
NeoBundleLazy 'leshill/vim-json', {'autoload':{'filetypes':['javascript','json']}}
NeoBundleLazy 'maksimr/vim-jsbeautify', {'autoload':{'filetypes':['javascript']}} " {{{
  nnoremap <leader>fjs :call JsBeautify()<cr>
" }}}

NeoBundleLazy 'kchmck/vim-coffee-script', {'autoload':{'filetypes':['coffee']}} " {{{
  let coffee_indent_keep_current = 1
" }}}


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => FrontEnd
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
NeoBundle 'mxw/vim-jsx' "{{{
  let g:jsx_ext_required = 1 " Allow JSX in normal JS files"
"}}}
NeoBundle 'avelino/flux.vim'
NeoBundleLazy 'groenewege/vim-less', {'autoload':{'filetypes':['less']}}
NeoBundleLazy 'cakebaker/scss-syntax.vim', {'autoload':{'filetypes':['scss','sass']}}
NeoBundleLazy 'hail2u/vim-css3-syntax', {'autoload':{'filetypes':['css','scss','sass']}}
NeoBundleLazy 'ap/vim-css-color', {'autoload':{'filetypes':['css','scss','sass','less','styl']}}
NeoBundleLazy 'othree/html5.vim', {'autoload':{'filetypes':['html']}}
NeoBundleLazy 'wavded/vim-stylus', {'autoload':{'filetypes':['styl']}}
NeoBundleLazy 'digitaltoad/vim-jade', {'autoload':{'filetypes':['jade']}}
NeoBundleLazy 'gregsexton/MatchTag', {'autoload':{'filetypes':['html','xml']}}
NeoBundleLazy 'othree/javascript-libraries-syntax.vim', {'autoload':{'filetypes':['javascript','coffee','ls','typescript']}}
NeoBundleLazy 'tpope/vim-markdown', {'autoload':{'filetypes':['markdown']}}

NeoBundleLazy 'mustache/vim-mustache-handlebars', {'autoload':{'filetypes':['mustache','handlebars','hbs']}} " {{{
  let g:mustache_abbreviations = 1
" }}}

NeoBundleLazy 'mattn/emmet-vim', {'autoload':{'filetypes':['htmldjango','jsx','swig','html','xml','xsl','xslt','xsd','css','sass','scss','less','mustache','handlebars','hbs']}} " {{{
  let g:user_emmet_settings = {'html':{'quote_char': "'",},}
" }}}



NeoBundle 'jvirtanen/vim-octave'



call neobundle#end()

" Required:
" Enable filetype plugins
filetype plugin indent on

" If there are uninstalled bundles found on startup,
" this will conveniently prompt you to install them.
NeoBundleCheck


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => TMUX Integration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if exists('$TMUX')
  " Easy navigation same as tmux, enjoy it!
  let g:tmux_navigator_no_mappings = 1

  nnoremap <silent> <C-h> :TmuxNavigateLeft<cr>
  nnoremap <silent> <C-j> :TmuxNavigateDown<cr>
  nnoremap <silent> <C-k> :TmuxNavigateUp<cr>
  nnoremap <silent> <C-l> :TmuxNavigateRight<cr>
  nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

  let g:tmux_navigator_save_on_switch = 1
else
  nnoremap <C-h> <C-w>h
  nnoremap <C-j> <C-w>j
  nnoremap <C-k> <C-w>k
  nnoremap <C-l> <C-w>l
endif

tnoremap <Esc> <C-\><C-n>
tnoremap <C-[> <C-\><C-n>

tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Folding and Theme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"foldmethod ident for some type of files
set foldlevel=99
" This the default one
set foldmethod=syntax nofoldenable
autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
autocmd BufNewFile,BufReadPost *.py setl foldmethod=indent nofoldenable

autocmd! BufWritePost * Neomake

" Color schema working at this point?
colorscheme base16-ocean

" Next three lines are to enable C-Space to autocomplete, omnicomplete
inoremap <C-Space> <C-x><C-o>
inoremap <C-@> <c-x><c-o>
